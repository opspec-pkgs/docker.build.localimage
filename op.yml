---
name: github.com/opspec-pkgs/docker.build.localimage
description: |
  Build a docker image in your host machines docker image store. Once a successful run of this op completes, you should see your new container created on the host machine when you run `docker images`.

  Example usage:

  ```yml
    op:
      ref: github.com/opspec-pkgs/docker.build.localimage#1.1.0
      inputs:
        imageName: my-image
        dockerfile: $(/Dockerfile)
        dockerSocket:
        dockerConfig:
          auths:
            "https://index.docker.io/v1/":
              auth: dXNlcm5hbWU6cGFzc3dvcmQK
  ```

  ```yml
    op:
      ref: github.com/opspec-pkgs/docker.build.localimage#1.1.0
      inputs:
        imageName: my-image
        dockerfile: $(/Dockerfile)
        dockerSocket:
        dockerConfig: $(HOME/.docker/config.json)
  ```
inputs:
  dockerfile:
    file:
      description: |
        The path the Dockerfile from which you will build the image or a directory containing one named `Dockerfile`.
      default: .
  dockerSocket:
    socket:
      description: |
        The socket path to the host machine's `dockerd` runtime socket.

        For linux, you can try `netstat -lx | grep docker | grep -Po '/.*docker.sock'` to verify the proper socket file. For macOS, the default is `/var/run/docker.sock`.
  dockerConfig:
    object:
      default: {}
      description: |
        The JSON of a docker configuration file. Use this to provide authentication to the docker registry.

        Note that when using a credential helper (the default with macOS docker desktop) your default docker config at ~/.docker/config.json will not directly contain credentials. If you need to provide auth in this case, you'll need to generate a configuration file with base64 encoded credentials. See https://github.com/docker/for-mac/issues/4100 for more discussion on the format of this file.
      constraints:
        properties:
          auths:
            type: object
            description: |
              Keys are registry hostname/urls and values contain authentication information
            additionalProperties:
              type: object
              properties:
                auth:
                  description: Base64 encoded string of the format `{username}:{password}`
                  type: string
                  format: base64
  imageName:
    string:
      description: |
        The name (tag) of the built image. e.g. "container_name:latest".
run:
  serial:
  - container:
      image: { ref: 'docker:18.09.0-dind' }
      files:
        /Dockerfile: $(dockerfile)
        /root/.docker/config.json: $(dockerConfig)
      sockets:
        /var/run/docker.sock: dockerSocket
      envVars:
        imageName: $(imageName)
      cmd:
        - sh
        - -ce
        - |
          cat /Dockerfile | docker image build \
            --progress plain \
            -t "$imageName" -

version: 1.1.0
